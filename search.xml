<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>计算机系统基础大作业 NEMU PA2</title>
    <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80%E5%A4%A7%E4%BD%9C%E4%B8%9A/NEMUPA2/</url>
    <content><![CDATA[<h2 id="x86-指令系统"><a href="#x86-指令系统" class="headerlink" title="x86 指令系统"></a><center><font size=6>x86 指令系统</font></center></h2><p>PA2的任务是实现基本x86指令，i386手册——<a href="http://css.csail.mit.edu/6.858/2013/readings/i386.pdf">INTEL 80386 PROGRAMMER’S REFERENCE MANUAL 1986 (mit.edu)</a>里全面地列出了所有指令的细节。</p>
<span id="more"></span>

<table><tr><td bgcolor=blue><center><b>南京大学的<a href=https://nju-projectn.github.io/ics-pa-gitbook/ics2019/PA2.html target="_blank">实验指导书</a></b></center></td></tr></table>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>此次实验目的是为了能够了解汇编语言中指令的各处细节，掌握IA-32指令格式，并且对NEMU平台中的指令周期了解地更加全面。PA2会开始涉及到一些计算机系统基础的知识。</p>
<h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><ul>
<li>阶段 1: 编写 helper 函数, 在 NEMU 中运行第一个 C 程序——mov-c.c</li>
<li>阶段 2: 实现更多的指令，并通过测试</li>
<li>阶段 3：完善简易调试器</li>
<li>阶段 4：实现 loader</li>
<li>最后阶段: 实现黑客运行时劫持实验（选做）</li>
</ul>
<h2 id="开始实验"><a href="#开始实验" class="headerlink" title="开始实验"></a><center><font size=6>开始实验</font></center></h2><hr>
<h2 id="x86指令格式"><a href="#x86指令格式" class="headerlink" title="x86指令格式"></a>x86指令格式</h2><center><b>指令格式</b></center>

<p><img src="https://img-blog.csdnimg.cn/20201211174725279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80ODQwNjQwNw==,size_16,color_FFFFFF,t_70"></p>
<p>除了Opcode一定出现以外，其他都是可选的。当Opcode前缀为66时，表示16位操作数，否则表示32位操作数。</p>
<center><b>MOV</b></center>

<p><img src="https://i.loli.net/2021/09/27/odJSiul48aTM61Q.png"></p>
<p>i386手册里的都是Intel格式，objdump的默认格式为AT&amp;T。这里以mov为例，功能描述里r/m表示时寄存器或内存，r/m后面的数值表示为多少位的寄存器，Opcode为89的有两种形式，而前面提到Opcode前缀就是用来区分16位和32位的，例如开始如果出现66 8B，则应该被解释成MOV r16,r/m16。Sreg表示段寄存器，moffs表示段内偏移，段的概念会以后提到。+rb +rw +rd则表示8位，16位，32位寄存器，可以通过按数值加法来确定唯一的寄存器。</p>
<center><b>ModR/M Table</b></center>

<p><img src="https://i.loli.net/2021/09/27/8FBG6UvHwaRQxkf.png" alt="pa2-1.png"></p>
<p>ModR/M域分成三个部分，Mod为2位，所以Mod可以指定4种寻址方式，每一种选择里还对应着不同的选择，这些便是由R/M来决定，而R/M为3位，所以又可以选择8种寻址方式。所以Mod + R/M可以组合成32种寻址方式，其中为8种为寄存器寻址，另24种为存储器寻址。Reg/Opcode则可以表示成8个寄存器或者对于Opcode的一个补充。以上为32位ModR/M的表。</p>
<center><b>SIB Table</b></center>

<p><img src="https://i.loli.net/2021/09/27/WqXkFDJhBmsj2aC.png" alt="image.png"></p>
<p>R/M代表的是寄存器还是内存，是由Mod决定的，当mod = 3时，r/m表示的是寄存器操作，否则为内存操作。ModR/M表中画横线的部分表示要使用到索引寻址，这时候便会使用到SIB，SIB由三个部分组成，Base代表基址寄存器，Index表示变址寄存器，SS表示比例系数。举个例子，例如 mov [ebx + eax * 2], ecx ，ebx为Base，eax为Index，2为SS。以上为SIB的表。</p>
<br>

<p>至于Displacement和Immediate则分别表示成偏移数和立即数，这两个都是按照小端序排列。例如，mov 0x1a2b[ebx + eax * 2], ecx ，其中的0x1a2b表示Displacement。</p>
<table><tr><td bgcolor=red><center><b>这里的图都是还未被修正过的，图中画蓝线的部分是错误的，需要自行对照勘误表</a></b></center></td></tr></table>

<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>由于一个字节为8位，最多只能表示成256个形式，一旦指令形式的数目大于256时，这时候就需要用到转移码的概念或者利用Reg/Opcode中的Opcode来补充指令。</p>
<ul>
<li>x86中分别有两字节转移码和三字节转移码，当Opcode前一个字节为0x0f或者前两个字节为0x0f和0x38的时候，表示需要再读入一个字节来确定唯一的指令形式。</li>
<li>当Reg/Opcode域被当作Opcode来解释的时候，这些指令会被划分为不同的指令组，在同一个指令组的指令则需要通过Reg/Opcode域中的Opcode来唯一确定。</li>
</ul>
<hr>
<h2 id="必做任务-1：运行用户程序-mov-c"><a href="#必做任务-1：运行用户程序-mov-c" class="headerlink" title="必做任务 1：运行用户程序 mov-c"></a>必做任务 1：运行用户程序 mov-c</h2><p>首先需要查找i386手册中指令的相关篇幅，通过指令的Opcode决定指令的具体形式。之后根据实验给出的代码框架，实现指令需要创建三个文件，分别为xxx-template.h、xxx.c、xxx.h。最后必须在<strong>nemu/src/cpu/exec/all-instar.h</strong>包含所创建的指令头文件，并且在<strong>nemu/src/cpu/exec/exec.c</strong>中依照Opcode在正确的位置添加与之相对应的指令。<b>PA2代码框架中所定义的宏极为重要，在实现指令时可以省去很多重复的步骤，需要仔细阅读实验指导书并且理解。</b></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(nemu) c</span><br><span class="line">invalid opcode(eip = 0x001012c5): e8 c6 fe ff ff e8 d1 fe ...</span><br><span class="line"></span><br><span class="line">There are two cases <span class="built_in">which</span> will trigger this unexpected exception:</span><br><span class="line">1. The instruction at eip = 0x001012c5 is not implemented.</span><br><span class="line">2. Something is implemented incorrectly.</span><br><span class="line">Find this eip value(0x001012c5) <span class="keyword">in</span> the disassembling result to distinguish <span class="built_in">which</span> <span class="keyword">case</span> it is.</span><br><span class="line"></span><br><span class="line">If it is the first <span class="keyword">case</span>, see</span><br><span class="line"> _ ____   ___    __    __  __                         _ </span><br><span class="line">(_)___ \ / _ \  / /   |  \/  |                       | |</span><br><span class="line"> _  __) | (_) |/ /_   | \  / | __ _ _ __  _   _  __ _| |</span><br><span class="line">| ||__ &lt; &gt; _ &lt;| <span class="string">&#x27;_ \  | |\/| |/ _` | &#x27;</span>_ \| | | |/ _` | |</span><br><span class="line">| |___) | (_) | (_) | | |  | | (_| | | | | |_| | (_| | |</span><br><span class="line">|_|____/ \___/ \___/  |_|  |_|\__,_|_| |_|\__,_|\__,_|_|</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> more details.</span><br><span class="line"></span><br><span class="line">If it is the second <span class="keyword">case</span>, remember:</span><br><span class="line">* The machine is always right!</span><br><span class="line">* Every line of untested code is always wrong!</span><br><span class="line"></span><br><span class="line">nemu: nemu/src/cpu/<span class="built_in">exec</span>/special/special.c:24: inv: Assertion `0<span class="string">&#x27; failed.</span></span><br><span class="line"><span class="string">Makefile:63: recipe for target &#x27;</span>run<span class="string">&#x27; fail</span></span><br></pre></td></tr></table></figure>

<p>修改NEMU根目录下Make File中的用户程序后，执行NEMU会发现报错，错误原因是还没有实现0xe8为首字节的指令。下面会给出两个实现指令的过程，剩余指令就不给出了。</p>
<hr>
<h3 id="实现call指令"><a href="#实现call指令" class="headerlink" title="实现call指令"></a>实现call指令</h3><center><b>nemu/src/cpu/exec/control/call-template.h</b></center>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;cpu/exec/template-start.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> instr call</span></span><br><span class="line"></span><br><span class="line">make_helper(concat(call_i_, SUFFIX)) &#123;</span><br><span class="line">	<span class="keyword">int</span> len = concat(decode_i_, SUFFIX)(eip + <span class="number">1</span>); <span class="comment">//calculate the length of instr (include opcode)</span></span><br><span class="line">	reg_l(R_ESP) -= DATA_BYTE; <span class="comment">//esp - 4 (push)</span></span><br><span class="line">	MEM_W(reg_l(R_ESP), cpu.eip + len + <span class="number">1</span>); <span class="comment">//write current eip next address to esp (mov)</span></span><br><span class="line">	cpu.eip += (DATA_TYPE_S)op_src-&gt;val; <span class="comment">//length from eip to function</span></span><br><span class="line">	print_asm(<span class="string">&quot;call: 0x%x&quot;</span>, cpu.eip + len + <span class="number">1</span>); <span class="comment">// eip update</span></span><br><span class="line">	<span class="keyword">return</span> len + <span class="number">1</span>; <span class="comment">// return opcode + behind</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">make_helper(concat(call_rm_, SUFFIX)) &#123;</span><br><span class="line">	<span class="keyword">int</span> len = concat(decode_rm_, SUFFIX)(eip + <span class="number">1</span>);</span><br><span class="line">	reg_l(R_ESP) -= DATA_BYTE;</span><br><span class="line">	MEM_W(reg_l(R_ESP), cpu.eip + len + <span class="number">1</span>);</span><br><span class="line">	cpu.eip = (DATA_TYPE_S)op_src-&gt;val - len - <span class="number">1</span>;</span><br><span class="line">	print_asm(<span class="string">&quot;call: %s&quot;</span>, op_src-&gt;str);</span><br><span class="line">	<span class="keyword">return</span> len + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;cpu/exec/template-end.h&quot;</span></span></span><br></pre></td></tr></table></figure>

<p>编写call指令模板文件。call指令可以大致分成三个步骤。</p>
<ul>
<li>esp = esp - DATA_BYTE，栈腾出位置。</li>
<li>[esp] = 返回地址 ，把返回地址压入栈中。</li>
<li>eip跳转到函数地址。</li>
</ul>
<blockquote>
<p>这里涉及了对指针ESP、帧指针EBP、栈函数调用栈、栈帧等各方面的理解。栈指针ESP永远指向系统栈中最上面一个栈帧的栈顶，而帧指针EBP则永远指向系统战中最上面一个栈帧的栈底，这两个指针的作用主要是用来保存（或恢复）堆栈。后续有个选做任务也是和这个的原理类似。</p>
</blockquote>
<center><b>nemu/src/cpu/exec/control/call.c</b></center>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;cpu/exec/helper.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA_BYTE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;call-template.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> DATA_BYTE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA_BYTE 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;call-template.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> DATA_BYTE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA_BYTE 4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;call-template.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> DATA_BYTE</span></span><br><span class="line"></span><br><span class="line">make_helper_v(call_i)</span><br><span class="line">make_helper_v(call_rm)</span><br></pre></td></tr></table></figure>

<p>编写call指令实例化文件。</p>
<center><b>nemu/src/cpu/exec/control/call.h</b></center>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;cpu/exec/helper.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">make_helper(call_i_v);</span><br><span class="line"></span><br><span class="line">make_helper(call_rm_v);</span><br></pre></td></tr></table></figure>

<p>编写call指令头文件。</p>
<hr>
<h2 id="EFLAGS寄存器"><a href="#EFLAGS寄存器" class="headerlink" title="EFLAGS寄存器"></a>EFLAGS寄存器</h2><center><b>EFLAGS寄存器结构</b></center>

<p><img src="https://i.loli.net/2021/09/27/bPO1iHDalk9jp3g.png" alt="image.png"></p>
<p>编写test指令之前需要了解EFLAGS寄存器，这是一个32位寄存器。第1、3、5、15以及22到31位会被保留，其余的标志位有些可以被特殊的指令直接被修改，但是并没有任何一条指令可以查看或者修改整个寄存器。</p>
<ul>
<li>CF：进位标志，如果运算的结果最高位产生了进位或借位，其值为1，否则为0。</li>
<li>PF：奇偶标志，计算运算结果里1的奇偶性，偶数为1，否则为0。</li>
<li>AF：辅助进位标志，取运算结果最后四位，最后四位向前有进位或借位，其值为1，否则为0。</li>
<li>ZF：零标志，相关指令结束后判断是否为0，结果为0，其值为1，否则为0。</li>
<li>SF：符号标志，相关质量结束后判断正负，结果为负，其值为1，否则为0。</li>
<li>TF：单步标志，当其值为1时，表示处理器每次只执行一条指令。</li>
<li>IF：中断使能标志，表示能否响应外部中断，若能响应外部中断，其值为1，否则为0。</li>
<li>DF：方向标志，当DF为1，ESI、EDI自动递减，否则自动递增。</li>
<li>OF：溢出标志，反映有符号数运算结果是否溢出，如果溢出，其值为1，否则为0。</li>
</ul>
<p><img src="https://i.loli.net/2021/09/27/rblRGK4Bo69ca5E.png"></p>
<p>代码框架已经为我们实现好了EFLAGS寄存器的结构，但是需要为EFLAGS寄存器初始化。i386手册第十章有给出EFLAGS寄存器的初始值。</p>
<hr>
<h3 id="实现test指令"><a href="#实现test指令" class="headerlink" title="实现test指令"></a>实现test指令</h3><center><b>nemu/src/monitor/monitor.c</b></center>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">restart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">	<span class="comment">/* Set EFLAGS. */</span></span><br><span class="line">	cpu.eflags.val = <span class="number">0x00000002</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将EFLAGS寄存器初始为0x00000002。</p>
<center><b>nemu/src/cpu/exec/logic/test-template.h</b></center>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;cpu/exec/template-start.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> instr test</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">do_execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  DATA_TYPE ret = op_dest -&gt; val &amp; op_src -&gt; val; <span class="comment">// cmp two statement bit</span></span><br><span class="line">  cpu.eflags.SF = ret &gt;&gt; ((DATA_BYTE &lt;&lt; <span class="number">3</span>) - <span class="number">1</span>); <span class="comment">// left 31 bit, SF == 1, negative number</span></span><br><span class="line">  cpu.eflags.ZF = !ret; <span class="comment">// Zf == 1, zero number</span></span><br><span class="line">  cpu.eflags.CF = <span class="number">0</span>; <span class="comment">//test excustive CF = 0</span></span><br><span class="line">  cpu.eflags.OF = <span class="number">0</span>; <span class="comment">//test excustive OF = 0</span></span><br><span class="line">  ret ^= ret &gt;&gt; <span class="number">4</span>;</span><br><span class="line">  ret ^= ret &gt;&gt; <span class="number">2</span>;</span><br><span class="line">  ret ^= ret &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  ret &amp;= <span class="number">1</span>; <span class="comment">// if last bit == 1, odd number</span></span><br><span class="line">  cpu.eflags.PF = !ret; <span class="comment">// PF == 1, even number, Pf == 0, odd number</span></span><br><span class="line">  DATA_TYPE result = op_dest -&gt; val &amp; op_src -&gt; val;</span><br><span class="line">  update_eflags_pf_zf_sf((DATA_TYPE_S)result);</span><br><span class="line">  cpu.eflags.CF = cpu.eflags.OF = <span class="number">0</span>;</span><br><span class="line">  print_asm_template1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">make_instr_helper(i2a)</span><br><span class="line">make_instr_helper(i2rm)</span><br><span class="line">make_instr_helper(r2rm)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;cpu/exec/template-end.h&quot;</span></span></span><br></pre></td></tr></table></figure>

<p>编写test指令模板文件。由于test指令执行需要更新标志位，这里可以手动为EFLAGS寄存器的各个标志位赋值，也可以利用代码框架提供的函数update_eflags_pf_zf_sf()更新pf、zf、sf这三个标志位。</p>
<center><b>nemu/src/cpu/exec/logic/test.c</b></center>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;cpu/exec/helper.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA_BYTE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;test-template.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> DATA_BYTE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA_BYTE 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;test-template.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> DATA_BYTE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA_BYTE 4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;test-template.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> DATA_BYTE</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* for instruction encoding overloading */</span></span><br><span class="line"></span><br><span class="line">make_helper_v(test_i2a)</span><br><span class="line">make_helper_v(test_i2rm)</span><br><span class="line">make_helper_v(test_r2rm)</span><br></pre></td></tr></table></figure>

<p>编写test指令实例化文件。</p>
<center><b>nemu/src/cpu/exec/logic/test.h</b></center>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __TEST_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __TEST_H__</span></span><br><span class="line"></span><br><span class="line">make_helper(test_i2a_b);</span><br><span class="line">make_helper(test_i2rm_b);</span><br><span class="line">make_helper(test_r2rm_b);</span><br><span class="line"></span><br><span class="line">make_helper(test_i2a_v);</span><br><span class="line">make_helper(test_i2rm_v);</span><br><span class="line">make_helper(test_r2rm_v);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>编写test指令头文件。</p>
<h3 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">objcopy -S -O binary obj/kernel/kernel entry</span><br><span class="line">obj/nemu/nemu obj/testcase/mov-c</span><br><span class="line">Welcome to NEMU!</span><br><span class="line">The executable is obj/testcase/mov-c.</span><br><span class="line">For help, type &quot;help&quot;</span><br><span class="line">(nemu) c</span><br><span class="line">.nemu: HIT GOOD TRAP at eip = 0xc0101325</span><br></pre></td></tr></table></figure>

<p>成功运行用户程序mov-c。</p>
<hr>
<h2 id="必做任务-2：实现更多指令"><a href="#必做任务-2：实现更多指令" class="headerlink" title="必做任务 2：实现更多指令"></a>必做任务 2：实现更多指令</h2><p>此次任务需要通过所有testcase下目录的程序，除了这五个hello-inline-asm、 hello、integral、quadratic-eq、print-FLOAT。这个可以说是整个PA代码量最大的一次任务，需要反复查阅i386手册。</p>
<hr>
<h2 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h2><center><b>单精度浮点数结构</b></center>

<img src="https://ae01.alicdn.com/kf/H7a7342f3dcc641c7a8bf3541376b015dJ.jpg" style="zoom:67%;" />

<p>浮点数遵循着IEEE 754标准，里面很多细节，懒惰写了。</p>
<blockquote>
<p>具体可参考：<a href="https://github.com/fang0jun/Blog/issues/27">浮点数详解(IEEE 754标准） · Issue #27 · fang0jun/Blog · GitHub</a></p>
</blockquote>
<hr>
<h2 id="定点化浮点数"><a href="#定点化浮点数" class="headerlink" title="定点化浮点数"></a>定点化浮点数</h2><p>x86架构上引进了协处理器x87架构，所以就可以处理浮点数运算相关的指令。但是NEMU中不实现类似x87架构的指令系统，所以引进了一个概念，”浮点数定点化”，是通过32位整数来模拟浮点数，就是为了让NEMU实现类似浮点数的机制，称作定点数。</p>
<center><b>定点数结构</b></center>

<p><img src="https://i.loli.net/2021/09/27/2dNeVOFmCjIU69s.png" alt="image.png"></p>
<ul>
<li>sign为1位，负数，其值为1，否则为0。</li>
<li>integer为15位，表示实数中整数的部分，如果整数部分超过15位则会发生溢出。</li>
<li>fraction为16位，表示实数中小数的部分，只保留小数16位。</li>
</ul>
<p>实数转为定点数的时候需要乘2^16，相反亦是如此。例如实数1.5，1.5 * 2^16 = 98304 ，也就是0x18000。</p>
<img src="https://i.loli.net/2021/09/27/AwxaM9m4vXJkItQ.png" alt="image.png" style="zoom:67%;" />

<p>0x18000 / 2^16 = 1.5 ，这样就完成了实数和定点数相互转换的过程。实数转定点数会失去表数范围和精度，但是这样的做法可以换取速度，只不过这里的例子恰好没有让实数失去精度。</p>
<hr>
<h2 id="必做任务3：实现-binary-scaling"><a href="#必做任务3：实现-binary-scaling" class="headerlink" title="必做任务3：实现 binary scaling"></a>必做任务3：实现 binary scaling</h2><p>此次任务需要通过integral和quadratic-eq这两个程序，这两个程序涉及到了浮点数的使用。NEMU中可以识别浮点数，但是却没有与之相对应的浮点数运算指令。而我们需要做的是把浮点数转为定点数，并且实现基本运算。</p>
<center><b>nemu/lib-common/FLOAT.h</b></center>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __FLOAT_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __FLOAT_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;trap.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> FLOAT;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">F2int</span><span class="params">(FLOAT a)</span> </span>&#123;</span><br><span class="line">	a &amp;= <span class="number">0xffff0000</span>;</span><br><span class="line">	<span class="keyword">return</span> a &gt;&gt; <span class="number">16</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> FLOAT <span class="title">int2F</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a &lt;&lt; <span class="number">16</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> FLOAT <span class="title">F_mul_int</span><span class="params">(FLOAT a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> FLOAT <span class="title">F_div_int</span><span class="params">(FLOAT a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a / b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<p>实现整数和定点数的转换。</p>
<center><b>nemu/lib-common/FLOAT/FLOAT.c</b></center>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;FLOAT.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">FLOAT <span class="title">F_mul_F</span><span class="params">(FLOAT a, FLOAT b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> c = (<span class="keyword">long</span> <span class="keyword">long</span>)a * (<span class="keyword">long</span> <span class="keyword">long</span>)b;</span><br><span class="line">	<span class="keyword">return</span> (FLOAT)(c &gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">FLOAT <span class="title">F_div_F</span><span class="params">(FLOAT a, FLOAT b)</span> </span>&#123;</span><br><span class="line">	FLOAT p, q;</span><br><span class="line">	<span class="function"><span class="keyword">asm</span> <span class="title">volatile</span><span class="params">(<span class="string">&quot;idiv %2&quot;</span> : <span class="string">&quot;=a&quot;</span>(p), <span class="string">&quot;=d&quot;</span>(q) : <span class="string">&quot;r&quot;</span>(b), <span class="string">&quot;a&quot;</span>(a &lt;&lt; <span class="number">16</span>), <span class="string">&quot;d&quot;</span>(a &gt;&gt; <span class="number">16</span>))</span></span>;</span><br><span class="line">	<span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">FLOAT <span class="title">f2F</span><span class="params">(<span class="keyword">float</span> a)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> b = *(<span class="keyword">int</span> *)&amp;a;</span><br><span class="line">	<span class="keyword">int</span> sign = b &gt;&gt; <span class="number">31</span>;</span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">exp</span> = (b &gt;&gt; <span class="number">23</span>) &amp; <span class="number">0xff</span>;</span><br><span class="line">	FLOAT c = b &amp; <span class="number">0x7fffff</span>;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">exp</span> != <span class="number">0</span>) &#123;</span><br><span class="line">		c += <span class="number">1</span> &lt;&lt; <span class="number">23</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">exp</span> -= <span class="number">150</span>;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">exp</span> &lt; <span class="number">-16</span>) &#123;</span><br><span class="line">		c &gt;&gt;= <span class="number">-16</span> - <span class="built_in">exp</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">exp</span> &gt; <span class="number">-16</span>) &#123;</span><br><span class="line">		c &lt;&lt;= <span class="built_in">exp</span> + <span class="number">16</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> sign == <span class="number">0</span> ? c : -c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">FLOAT <span class="title">Fabs</span><span class="params">(FLOAT a)</span> </span>&#123;</span><br><span class="line">	FLOAT b;</span><br><span class="line">	<span class="keyword">if</span> (a &gt; <span class="number">0</span>)&#123;</span><br><span class="line">		b = a;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		b = -a;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<p>实现顶点数基本运算。这里有两点需要注意，一个是浮点数如何转换成定点数，需要了解<a href="#%E6%B5%AE%E7%82%B9%E6%95%B0">浮点数</a>具体的结构，另一个则是运用内联汇编。</p>
<blockquote>
<p>内联汇编可参考：<a href="https://blog.csdn.net/weixin_35834894/article/details/108875451">gcc 内联汇编格式以及详解_坚持的力量-CSDN博客</a></p>
</blockquote>
<p>之后根据实验指导书中需要修改的地方都修改后，便可运行integral和quadratic-eq这两个程序。</p>
<hr>
<h2 id="必做任务-4：为表达式求值添加变量的支持"><a href="#必做任务-4：为表达式求值添加变量的支持" class="headerlink" title="必做任务 4：为表达式求值添加变量的支持"></a>必做任务 4：为表达式求值添加变量的支持</h2><p>这里涉及到了一些ELF文件里的一些细节，在之后的任务会更深入探讨。</p>
<center><b>nemu/src/monitor/debug/elf.c</b></center>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">getValue</span><span class="params">(<span class="keyword">char</span>* str,<span class="keyword">bool</span>* success)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nr_symtab_entry; i++)&#123;</span><br><span class="line">        <span class="comment">//STT_OBJECT代表符号的类型是一个数据对象，例如变量、数组、指针（符号的类型在低四位）</span></span><br><span class="line">		<span class="keyword">if</span> ((symtab[i].st_info &amp; <span class="number">0xf</span>) == STT_OBJECT || (symtab[i].st_info &amp; <span class="number">0xf</span>) == STT_FUNC)&#123; </span><br><span class="line">            <span class="comment">//字符串表+符号偏移量 = 符号所在地址STT_FUNC代表符号的类型是一个函数（符号的类型在低四位）</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">strcmp</span>(strtab + symtab[i].st_name, str) == <span class="number">0</span>)&#123; </span><br><span class="line">				<span class="keyword">return</span> symtab[i].st_value;</span><br><span class="line">			&#125; </span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	*success = <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">getFuncName</span><span class="params">(<span class="keyword">swaddr_t</span> eip)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; nr_symtab_entry; i ++) &#123;</span><br><span class="line">		<span class="keyword">if</span>((symtab[i].st_info &amp; <span class="number">0xf</span>) == STT_FUNC )&#123;</span><br><span class="line">				<span class="keyword">if</span>(eip &gt;= symtab[i].st_value &amp;&amp; eip &lt;= symtab[i].st_value + symtab[i].st_size)  &#123;</span><br><span class="line">				<span class="keyword">return</span> strtab + symtab[i].st_name;</span><br><span class="line">		&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在符号表中取出相应函数的地址和函数名(选做任务)，之后在<strong>nemu/src/monitor/debug/expr.c</strong>添加相应的规则后，便可在表达式中使用变量了。</p>
<hr>
<h2 id="栈帧链"><a href="#栈帧链" class="headerlink" title="栈帧链"></a>栈帧链</h2><center><b>栈帧链</b></center>

<img src="http://xiehongfeng100.github.io/images/os/linux-kenel-0.11/necessary-preparation/part10/stack_frame_structure.png" style="zoom: 67%;" />

<p>栈帧链大致的概念就是，在若干次函数调用时会在堆栈中形成栈帧。在调用函数之前，调用函数的当前栈帧会保存自己的信息，此时ESP指向当前栈帧底部、EBP指向当前栈帧顶部。而调用函数之后，首先会把被调用函数的参数和调用函数的返回地址压入栈，并且被调用函数现在有了一个自己的栈帧，此时EBP和ESP分别指向被调用函数的栈帧底部和栈帧顶部。</p>
<hr>
<h2 id="选做任务-1：打印栈帧链"><a href="#选做任务-1：打印栈帧链" class="headerlink" title="选做任务 1：打印栈帧链"></a>选做任务 1：打印栈帧链</h2><p>这里需要理解栈帧和函数过程调用。</p>
<center><b>nemu/src/monitor/debug/ui.c</b></center>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="keyword">swaddr_t</span> prev_ebp;</span><br><span class="line">	<span class="keyword">swaddr_t</span> ret_addr;</span><br><span class="line">	<span class="comment">//uint32_t args[4];</span></span><br><span class="line">&#125;PartOfStackFrame ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">getFuncName</span><span class="params">(<span class="keyword">int</span> eip)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">cmd_bt</span><span class="params">(<span class="keyword">char</span> *args)</span></span>&#123;</span><br><span class="line">	PartOfStackFrame frame;</span><br><span class="line">	frame.ret_addr = cpu.eip;</span><br><span class="line">	<span class="keyword">swaddr_t</span> temp_ebp = cpu.ebp;</span><br><span class="line">	<span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(temp_ebp)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;#%d\t0x%x\t%s\t0x%x\t0x%x\t0x%x\t0x%x\n&quot;</span>, count++, frame.ret_addr, getFuncName(cpu.eip), swaddr_read(temp_ebp + <span class="number">8</span>, <span class="number">4</span>), swaddr_read(temp_ebp + <span class="number">12</span>, <span class="number">4</span>), swaddr_read(temp_ebp + <span class="number">16</span>, <span class="number">4</span>), swaddr_read(temp_ebp + <span class="number">20</span>, <span class="number">4</span>));</span><br><span class="line">		<span class="comment">//current_sreg = R_SS;</span></span><br><span class="line">		frame.prev_ebp = swaddr_read(temp_ebp, <span class="number">4</span>);</span><br><span class="line">		frame.ret_addr = swaddr_read(temp_ebp + <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">		temp_ebp = frame.prev_ebp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<p>只需要打印出函数名、返回地址以及前四个参数。如果了解了栈帧链概念，这部分就很容易实现。</p>
<hr>
<h2 id="ELF文件"><a href="#ELF文件" class="headerlink" title="ELF文件"></a>ELF文件</h2><p>ELF文件提供了两个视角，分别为面向链接的<strong>section</strong>视角和面向执行的<strong>segment</strong>视角。里面很多细节，也懒惰写了，直接上链接。</p>
<blockquote>
<p><a href="https://www.cnblogs.com/jiqingwu/p/elf_format_research_01.html">ELF文件解析（一）：Segment和Section - JollyWing - 博客园 (cnblogs.com)</a></p>
<p><a href="https://www.cnblogs.com/jiqingwu/p/elf_explore_2.html">ELF文件解析（二）：ELF header详解 - JollyWing - 博客园 (cnblogs.com)</a></p>
<p><a href="https://www.cnblogs.com/jiqingwu/p/elf_explore_3.html">ELF格式探析之三：sections - JollyWing - 博客园 (cnblogs.com)</a></p>
</blockquote>
<hr>
<h2 id="必做任务-5：实现-loader"><a href="#必做任务-5：实现-loader" class="headerlink" title="必做任务 5：实现 loader"></a>必做任务 5：实现 loader</h2><center><b>kernel/src/elf/elf.c</b></center>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">loader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">	<span class="comment">/* <span class="doctag">TODO:</span> fix the magic number with the correct one */</span></span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">uint32_t</span> elf_magic = <span class="number">0x464c457f</span>;</span><br><span class="line">	<span class="keyword">uint32_t</span> *p_magic = (<span class="keyword">void</span> *)buf;</span><br><span class="line">	nemu_assert(*p_magic == elf_magic);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Load each program segment */</span></span><br><span class="line">	<span class="comment">//panic(&quot;please implement me&quot;);</span></span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	ph = (<span class="keyword">void</span>*)(buf + elf-&gt;e_phoff);</span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; elf-&gt;e_phnum; i++) &#123;</span><br><span class="line">		<span class="comment">/* Scan the program header table, load each segment into memory */</span></span><br><span class="line">		<span class="keyword">if</span>(ph-&gt;p_type == PT_LOAD) &#123;</span><br><span class="line">			<span class="keyword">uint32_t</span> pa = ph-&gt;p_vaddr;</span><br><span class="line">			<span class="comment">/* <span class="doctag">TODO:</span> read the content of the segment from the ELF file </span></span><br><span class="line"><span class="comment">			 * to the memory region [VirtAddr, VirtAddr + FileSiz)</span></span><br><span class="line"><span class="comment">			 */</span></span><br><span class="line">			ramdisk_read((<span class="keyword">void</span> *)pa,ph-&gt;p_offset,ph-&gt;p_filesz);</span><br><span class="line">			<span class="comment">/* <span class="doctag">TODO:</span> zero the memory region </span></span><br><span class="line"><span class="comment">			 * [VirtAddr + FileSiz, VirtAddr + MemSiz)</span></span><br><span class="line"><span class="comment">			 */</span></span><br><span class="line">			<span class="built_in">memset</span>((<span class="keyword">void</span>*)pa+ph-&gt;p_filesz,<span class="number">0</span>,ph-&gt;p_memsz-ph-&gt;p_filesz);</span><br><span class="line">			</span><br><span class="line">			ph ++;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先需要正确定义ELF的Magic Word用来识别文件是否为ELF格式，这里用了框架代码中给出的函数ramdisk_read()用于读出ramdisk里的内容，然后把segment的代码正确加载。最后依照实验指导书中指示需要修改的部分后修改，即可完成此次任务，算是为PA3开一个头。</p>
<hr>
<h2 id="选做任务2：-实现黑客运行时劫持实验"><a href="#选做任务2：-实现黑客运行时劫持实验" class="headerlink" title="选做任务2： 实现黑客运行时劫持实验"></a>选做任务2： 实现黑客运行时劫持实验</h2><p>有时间可能会补上吧，有点类似csapp的lab。</p>
<hr>
<h2 id="任务自查表"><a href="#任务自查表" class="headerlink" title="任务自查表"></a>任务自查表</h2><table>
<thead>
<tr>
<th align="center">序号</th>
<th align="center">是否已完成</th>
</tr>
</thead>
<tbody><tr>
<td align="center">必做任务1</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">必做任务2</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">必做任务3</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">必做任务4</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">必做任务5</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">选做任务1</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">选做任务2</td>
<td align="center">否</td>
</tr>
</tbody></table>
<h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><table><tr><td bgcolor=red><center><b>思考题仅作为个人思考，若有错误欢迎指出</a>。</b></center></td></tr></table>

<h3 id="思考题1：-main-函数返回到哪里"><a href="#思考题1：-main-函数返回到哪里" class="headerlink" title="思考题1： main 函数返回到哪里"></a><b>思考题1： main 函数返回到哪里</b></h3><blockquote>
<p>程序最后会触发nemu_trap()函数来判断运行结果是否正确，最后仍然会在Nemu程序中，并且继续等待用户输入操作指令，如果是linux，则会返回到linux主程序中等待继续操作。</p>
</blockquote>
<p><b>思考题2： 比较 FLOAT 和float</b></p>
<blockquote>
<p>Float相比float失去了表数范围和精准度，但是换来了速度。</p>
</blockquote>
<p><b>思考题3： 消失的符号</b></p>
<blockquote>
<p>遇到声明部分时，才会在符号表中添加，如果变量或函数离开了它的作用域时，符号表会从他们对应的记录从表中删除。所以函数内的局部参数在作用域范围外会在符号表中被删除，而形参没有直接具体的数据存储意义，不在符号表中存储。</p>
</blockquote>
<p><b>思考题4： 堆和栈在哪里？</b></p>
<blockquote>
<p>因为堆和栈中数据的变化比较快，放进可执行文件反而读取速度会变慢。所以当程序运行的时候，从内部里面来申请栈和堆的使用，加快运行速度。</p>
</blockquote>
<p><b>思考题5： 如何识别不同格式的可执行文件？</b></p>
<blockquote>
<p>ELF文件头开始时会有Magic Word，GNU/Linux每次读取elf头文件的时候，都会确认Magic Word是否正确，可以来判断文件格式。</p>
</blockquote>
<p><b>思考题6： 冗余的属性？</b></p>
<blockquote>
<p>FileSize和MemSize分别表示程序头在文件中和在内存中的大小，MemSize通常会大于FileSize，因为如果没有初始化的变量时不放在程序里的，但是加载到内存的时候需要把位置给腾出来，所以MemSize多的部分便是那些未初始化的变量。</p>
</blockquote>
<hr>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>RTFM很重要，PA2做到我要吐了。</p>
]]></content>
      <categories>
        <category>计算机系统基础大作业</category>
      </categories>
      <tags>
        <tag>NEMU</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机系统基础大作业 NEMU PA1</title>
    <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80%E5%A4%A7%E4%BD%9C%E4%B8%9A/NEMUPA1/</url>
    <content><![CDATA[<h2 id="NEMU-是什么"><a href="#NEMU-是什么" class="headerlink" title="NEMU 是什么?"></a><center><font size=6>NEMU 是什么?</font></center></h2><blockquote>
<p><font size=3><i>PA的目的是要实现NEMU, 一款经过简化的全系统模拟器.</p>
<p>但什么是模拟器呢?你小时候应该玩过红白机, 超级玛丽, 坦克大战, 魂斗罗… 它们的画面是否让你记忆犹新? (希望我们之间没有代沟…) 随着时代的发展, 你已经很难在市场上看到红白机的身影了. 当你正在为此感到苦恼的时候, 模拟器的横空出世唤醒了你心中尘封已久的童年回忆. 红白机模拟器可以为你模拟出红白机的所有功能. 有了它, 你就好像有了一个真正的红白机, 可以玩你最喜欢的红白机游戏. <a href="https://github.com/NJU-ProjectN/litenes">这里</a>是jyy移植的一个小型项目LiteNES, PA工程里面已经带有这个项目, 你可以在如今这个红白机难以寻觅的时代, 再次回味你儿时的快乐时光, 这实在是太神奇了!</i></front></p>
</blockquote>
<p>这是实验指导书中的一段描述。</p>
<span id="more"></span>

<table><tr><td bgcolor=blue><center><b>南京大学的<a href=https://nju-projectn.github.io/ics-pa-gitbook/ics2019/ target="_blank">实验指导书</a></b></center></td></tr></table>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>NEMU是一个模拟计算机系统，实现物理计算机的基本功能。更通俗地说，NEMU应该是把计算机的各个硬件虚拟化，使其看成一个个数据对象，例如NEMU中的内存，实际上是利用了数组的形式实现出来，并且我们可以对这个数据进行相应的操作，对应了实际我们对内存的读写操作。本实验便是要设计“NEMU”，一款经过简化的 x86 全系统模拟器。</p>
<hr>
<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p>NEMU 是基于 Linux/GNU 实验环境，所需要的环境如下：</p>
<ul>
<li>操作系统：Ubuntu18.04</li>
<li>编译器：GCC-4.4.7</li>
</ul>
<h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><p>本次实验包含如下三个阶段：</p>
<ul>
<li><p>阶段 1：实现“单步、打印寄存器状态、扫描内存”三个调试功能 </p>
</li>
<li><p>阶段 2：实现调试功能的表达式求值</p>
</li>
<li><p>阶段 3：实现监视点</p>
</li>
</ul>
<h2 id="开始实验"><a href="#开始实验" class="headerlink" title="开始实验"></a><center><font size=6>开始实验</font></center></h2><hr>
<h2 id="必做任务-1：实现正确的寄存器结构体"><a href="#必做任务-1：实现正确的寄存器结构体" class="headerlink" title="必做任务 1：实现正确的寄存器结构体"></a>必做任务 1：实现正确的寄存器结构体</h2><center><b>nemu/include/cpu/reg.h</b></center>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">            <span class="keyword">uint32_t</span> _32;</span><br><span class="line">            <span class="keyword">uint16_t</span> _16;</span><br><span class="line">            <span class="keyword">uint8_t</span> _8[<span class="number">2</span>];</span><br><span class="line">        &#125; gpr[<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Do NOT change the order of the GPRs&#x27; definitions. */</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            <span class="keyword">uint32_t</span> eax, ecx, edx, ebx, esp, ebp, esi, edi;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">swaddr_t</span> eip;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125; CPU_state;</span><br></pre></td></tr></table></figure>

<p>这是关于匿名结构体和联合体的使用。我们可以在<strong>结构体</strong>中使用<strong>匿名</strong>的方式声明某个联合体（或结构体）。之后就可以直接利用结构体访问成员的方式一样访问结构体中已经声明过的匿名联合体（或结构体）的成员，使用这种方式可以让代码更加简洁。</p>
<blockquote>
<p>具体可参考：<a href="https://blog.csdn.net/u012308586/article/details/105728995">C 语言中的匿名联合体和匿名结构体_CSDN博客-CSDN博客</a></p>
</blockquote>
<h3 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">aa10n@aa10n-VirtualBox:~/NEMU2021$ make run</span><br><span class="line">objcopy -S -O binary obj/kernel/kernel entry</span><br><span class="line">obj/nemu/nemu obj/testcase/mov-c</span><br><span class="line">Welcome to NEMU!</span><br><span class="line">The executable is obj/testcase/mov-c.</span><br><span class="line">For <span class="built_in">help</span>, <span class="built_in">type</span> <span class="string">&quot;help&quot;</span></span><br><span class="line">(nemu) c</span><br><span class="line">nemu: HIT GOOD TRAP at eip = 0x001012db</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="必做任务2：实现单步执行、打印寄存器、扫描内存"><a href="#必做任务2：实现单步执行、打印寄存器、扫描内存" class="headerlink" title="必做任务2：实现单步执行、打印寄存器、扫描内存"></a>必做任务2：实现单步执行、打印寄存器、扫描内存</h2><p>这次的任务主要是模拟GDB相关的功能。</p>
<center><b>nemu/src/monitor/debug/ui.c</b></center>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="keyword">char</span> *name;</span><br><span class="line">	<span class="keyword">char</span> *description;</span><br><span class="line">	<span class="keyword">int</span> (*handler) (<span class="keyword">char</span> *);</span><br><span class="line">&#125; cmd_table [] = &#123;</span><br><span class="line">	&#123; <span class="string">&quot;help&quot;</span>, <span class="string">&quot;Display informations about all supported commands&quot;</span>, cmd_help &#125;,</span><br><span class="line">	&#123; <span class="string">&quot;c&quot;</span>, <span class="string">&quot;Continue the execution of the program&quot;</span>, cmd_c &#125;,</span><br><span class="line">	&#123; <span class="string">&quot;q&quot;</span>, <span class="string">&quot;Exit NEMU&quot;</span>, cmd_q &#125;,</span><br><span class="line">	&#123; <span class="string">&quot;si&quot;</span>, <span class="string">&quot;One step&quot;</span>, cmd_si &#125;,</span><br><span class="line">	&#123; <span class="string">&quot;info&quot;</span>, <span class="string">&quot;Display all informations of regisiters&quot;</span>, cmd_info &#125;,</span><br><span class="line">	<span class="comment">/* <span class="doctag">TODO:</span> Add more commands */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>在相应位置填写所需要的指令。</p>
<h3 id="单步执行"><a href="#单步执行" class="headerlink" title="单步执行"></a>单步执行</h3><center><b>nemu/src/monitor/debug/ui.c</b></center>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">cmd_si</span><span class="params">(<span class="keyword">char</span> *args)</span></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> *sencondWord = strtok(<span class="literal">NULL</span>,<span class="string">&quot; &quot;</span>);</span><br><span class="line">	<span class="keyword">int</span> step = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">if</span> (sencondWord == <span class="literal">NULL</span>)&#123;</span><br><span class="line">		cpu_exec(<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sscanf</span>(sencondWord, <span class="string">&quot;%d&quot;</span>, &amp;step);</span><br><span class="line">	<span class="keyword">if</span> (step &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;MISINIPUT\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; step; i++)&#123;</span><br><span class="line">		cpu_exec(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加单步执行的相关代码。这里采取了for循环，一条一条指令执行。因为cpu_exec()函数中的宏MAX_INSTR_TO_PRINT限制为10，更改宏或者for循环后，都可解决无法执行10条以上指令的问题。</p>
<h3 id="打印寄存器"><a href="#打印寄存器" class="headerlink" title="打印寄存器"></a>打印寄存器</h3><center><b>nemu/src/monitor/debug/ui.c</b></center>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">cmd_info</span><span class="params">(<span class="keyword">char</span> *args)</span></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> *sencondWord = strtok(<span class="literal">NULL</span>,<span class="string">&quot; &quot;</span>);</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">strcmp</span>(sencondWord, <span class="string">&quot;r&quot;</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%s\t\t&quot;</span>, regsl[i]);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;0x%08x\t\t%d\n&quot;</span>, cpu.gpr[i]._32, cpu.gpr[i]._32);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;eip\t\t0x%08x\t\t%d\n&quot;</span>, cpu.eip, cpu.eip);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;MISINPUT\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加打印寄存器的相关代码。</p>
<h3 id="扫描内存"><a href="#扫描内存" class="headerlink" title="扫描内存"></a>扫描内存</h3><center><b>nemu/src/monitor/debug/ui.c</b></center>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">cmd_x</span><span class="params">(<span class="keyword">char</span> *args)</span></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> *sencondWord = strtok(<span class="literal">NULL</span>,<span class="string">&quot; &quot;</span>);</span><br><span class="line">	<span class="keyword">char</span> *thirdWord = strtok(<span class="literal">NULL</span>, <span class="string">&quot; &quot;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> step = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">lnaddr_t</span> address;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">sscanf</span>(sencondWord, <span class="string">&quot;%d&quot;</span>, &amp;step);</span><br><span class="line">	<span class="built_in">sscanf</span>(thirdWord, <span class="string">&quot;%x&quot;</span>, &amp;address);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> i, j = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; step; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span> (j % <span class="number">4</span> == <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;0x%x:&quot;</span>, address);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;0x%08x &quot;</span>, lnaddr_read(address, <span class="number">4</span>));</span><br><span class="line">		address += <span class="number">4</span>;</span><br><span class="line">		j++;</span><br><span class="line">		<span class="keyword">if</span> (j % <span class="number">4</span> == <span class="number">0</span>)&#123; <span class="comment">//分割成一行输出五个地址</span></span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">			&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加扫描内存的相关代码。</p>
<br>

<p>这里均使用到了<strong>char *strtok(char *str, const char *delim)</strong> 库函数，delim代表了分隔符，str则代表要被分解的一组字符串。该函数会有一个返回值，若没有可检索的字符串，则返回一个空指针，否则返回第一个子字符串。</p>
<blockquote>
<p>具体可参考：<a href="https://www.runoob.com/cprogramming/c-function-strtok.html">C 库函数 – strtok() | 菜鸟教程 (runoob.com)</a></p>
</blockquote>
<h3 id="输出结果-1"><a href="#输出结果-1" class="headerlink" title="输出结果"></a>输出结果</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(nemu) si</span><br><span class="line">  <span class="number">100000</span>:   bd <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>                        movl $<span class="number">0x0</span>,%ebp</span><br><span class="line">(nemu) si <span class="number">5</span></span><br><span class="line">  <span class="number">100005</span>:   bc <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">08</span>                        movl $<span class="number">0x8000000</span>,%esp</span><br><span class="line">  <span class="number">10000</span>a:   e9 <span class="number">11</span> <span class="number">12</span> <span class="number">00</span> <span class="number">00</span>                        jmp <span class="number">101220</span></span><br><span class="line">  <span class="number">101220</span>:   <span class="number">55</span>                                    pushl %ebp</span><br><span class="line">  <span class="number">101221</span>:   b8 <span class="number">60</span> <span class="number">12</span> <span class="number">10</span> <span class="number">00</span>                        movl $<span class="number">0x101260</span>,%eax</span><br><span class="line">  <span class="number">101226</span>:   <span class="number">89</span> e5                                 movl %esp,%ebp</span><br><span class="line">(nemu) si <span class="number">15</span></span><br><span class="line">  <span class="number">101228</span>:   <span class="number">83</span> ec <span class="number">18</span>                              subl $<span class="number">0x18</span>,%esp</span><br><span class="line">  <span class="number">10122b</span>:   ff e0                                 jmp *%eax</span><br><span class="line">  <span class="number">101260</span>:   <span class="number">55</span>                                    pushl %ebp</span><br><span class="line">  <span class="number">101261</span>:   <span class="number">89</span> e5                                 movl %esp,%ebp</span><br><span class="line">  <span class="number">101263</span>:   <span class="number">83</span> ec <span class="number">18</span>                              subl $<span class="number">0x18</span>,%esp</span><br><span class="line">  <span class="number">101266</span>:   c7 <span class="number">44</span> <span class="number">24</span> <span class="number">0</span>c a3 <span class="number">19</span> <span class="number">10</span> <span class="number">00</span>               movl $<span class="number">0x1019a3</span>,<span class="number">0xc</span>(%esp)</span><br><span class="line">  <span class="number">10126</span>e:   c7 <span class="number">44</span> <span class="number">24</span> <span class="number">08</span> <span class="number">4</span>a <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>               movl $<span class="number">0x4a</span>,<span class="number">0x8</span>(%esp)</span><br><span class="line">  <span class="number">101276</span>:   c7 <span class="number">44</span> <span class="number">24</span> <span class="number">04</span> <span class="number">5</span>c <span class="number">19</span> <span class="number">10</span> <span class="number">00</span>               movl $<span class="number">0x10195c</span>,<span class="number">0x4</span>(%esp)</span><br><span class="line">  <span class="number">10127</span>e:   c7 <span class="number">04</span> <span class="number">24</span> <span class="number">70</span> <span class="number">19</span> <span class="number">10</span> <span class="number">00</span>                  movl $<span class="number">0x101970</span>,(%esp)</span><br><span class="line">  <span class="number">101285</span>:   e8 c6 fe ff ff                        call  <span class="number">101150</span></span><br><span class="line">  <span class="number">101150</span>:   <span class="number">55</span>                                    pushl %ebp</span><br><span class="line">  <span class="number">101151</span>:   <span class="number">89</span> e5                                 movl %esp,%ebp</span><br><span class="line">  <span class="number">101153</span>:   <span class="number">5</span>d                                    popl %ebp</span><br><span class="line">  <span class="number">101154</span>:                                         ret</span><br><span class="line">  <span class="number">10128</span>a:   e8 d1 fe ff ff                        call  <span class="number">101160</span></span><br><span class="line">(nemu) info r</span><br><span class="line">eax             <span class="number">0x00101260</span>              <span class="number">1053280</span></span><br><span class="line">ecx             <span class="number">0x26365f3f</span>              <span class="number">641097535</span></span><br><span class="line">edx             <span class="number">0x5123097b</span>              <span class="number">1361250683</span></span><br><span class="line">ebx             <span class="number">0x7d3f57d7</span>              <span class="number">2101303255</span></span><br><span class="line">esp             <span class="number">0x07ffffc4</span>              <span class="number">134217668</span></span><br><span class="line">ebp             <span class="number">0x07ffffe0</span>              <span class="number">134217696</span></span><br><span class="line">esi             <span class="number">0x1d0c876a</span>              <span class="number">487360362</span></span><br><span class="line">edi             <span class="number">0x4d2976e8</span>              <span class="number">1294563048</span></span><br><span class="line">eip             <span class="number">0x00101160</span>              <span class="number">1053024</span></span><br><span class="line">(nemu) x <span class="number">10</span> <span class="number">0x100000</span></span><br><span class="line"><span class="number">0x100000</span>:<span class="number">0x000000bd</span> <span class="number">0x0000bc00</span> <span class="number">0x11e90800</span> <span class="number">0x90000012</span> </span><br><span class="line"><span class="number">0x100010</span>:<span class="number">0x56e58955</span> <span class="number">0x08458b53</span> <span class="number">0x2d0c5d8b</span> <span class="number">0x40000000</span> </span><br><span class="line"><span class="number">0x100020</span>:<span class="number">0xeac1da89</span> <span class="number">0xf0002516</span> </span><br></pre></td></tr></table></figure>

<p><font size =2><center><b>输出可能会和我稍有不同。</b></center></font></p>
<hr>
<h2 id="必做任务-3：实现算术表达式的词法分析"><a href="#必做任务-3：实现算术表达式的词法分析" class="headerlink" title="必做任务 3：实现算术表达式的词法分析"></a>必做任务 3：实现算术表达式的词法分析</h2><p>这里主要是完成表达式的计算和对正则表达式的理解。</p>
<center><b>nemu/src/monitor/debug/expr.c</b></center>



<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">	NOTYPE = <span class="number">256</span>,</span><br><span class="line">	NUM = <span class="number">1</span>,</span><br><span class="line">	RESGISTER = <span class="number">2</span>,</span><br><span class="line">	HEX = <span class="number">3</span>,</span><br><span class="line">	EQ = <span class="number">4</span>,</span><br><span class="line">	NOTEQ = <span class="number">5</span>,</span><br><span class="line">	OR = <span class="number">6</span>,</span><br><span class="line">	AND = <span class="number">7</span>,</span><br><span class="line">	POINT, NEG</span><br><span class="line">	<span class="comment">/* <span class="doctag">TODO:</span> Add more token types */</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>首先在添加表达式相应的token类型。</p>
<center><b>nemu/src/monitor/debug/expr.c</b></center>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">rule</span> &#123;</span></span><br><span class="line">	<span class="keyword">char</span> *regex;</span><br><span class="line">	<span class="keyword">int</span> token_type;</span><br><span class="line">&#125; rules[] = &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* <span class="doctag">TODO:</span> Add more rules.</span></span><br><span class="line"><span class="comment">	 * Pay attention to the precedence level of different rules.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line"></span><br><span class="line">	&#123;<span class="string">&quot; +&quot;</span>,	NOTYPE&#125;,				<span class="comment">// spaces</span></span><br><span class="line">	</span><br><span class="line">	&#123;<span class="string">&quot;\\+&quot;</span>, <span class="string">&#x27;+&#x27;</span>&#125;,					<span class="comment">// plus</span></span><br><span class="line">	&#123;<span class="string">&quot;\\-&quot;</span>, <span class="string">&#x27;-&#x27;</span>&#125;,</span><br><span class="line">	&#123;<span class="string">&quot;\\*&quot;</span>, <span class="string">&#x27;*&#x27;</span>&#125;,</span><br><span class="line">	&#123;<span class="string">&quot;\\/&quot;</span>, <span class="string">&#x27;/&#x27;</span>&#125;,</span><br><span class="line"></span><br><span class="line">	&#123;<span class="string">&quot;\\$[a-z]+&quot;</span>, RESGISTER&#125;,</span><br><span class="line">	&#123;<span class="string">&quot;0[xX][0-9a-fA-F]+&quot;</span>, HEX&#125;,</span><br><span class="line">	&#123;<span class="string">&quot;[0-9]+&quot;</span>, NUM&#125;,</span><br><span class="line">	</span><br><span class="line">	&#123;<span class="string">&quot;==&quot;</span>, EQ&#125;,						<span class="comment">// equal</span></span><br><span class="line">	&#123;<span class="string">&quot;!=&quot;</span>, NOTEQ&#125;,</span><br><span class="line">	</span><br><span class="line">	&#123;<span class="string">&quot;\\(&quot;</span>, <span class="string">&#x27;(&#x27;</span>&#125;,</span><br><span class="line">	&#123;<span class="string">&quot;\\)&quot;</span>, <span class="string">&#x27;)&#x27;</span>&#125;,</span><br><span class="line">	</span><br><span class="line">	&#123;<span class="string">&quot;\\|\\|&quot;</span>, OR&#125;,</span><br><span class="line">	&#123;<span class="string">&quot;&amp;&amp;&quot;</span>, AND&#125;,</span><br><span class="line">	&#123;<span class="string">&quot;!&quot;</span>, <span class="string">&#x27;!&#x27;</span>&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>在结构体rule中添加相应的规则。这里是正则表达式的运用。</p>
<center><b>nemu/src/monitor/debug/expr.c</b></center>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">make_token</span><span class="params">(<span class="keyword">char</span> *e)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line">				<span class="keyword">int</span> j;</span><br><span class="line">				<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">32</span>; j++)&#123; <span class="comment">//清空</span></span><br><span class="line">					tokens[nr_token].str[j] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">switch</span>(rules[i].token_type) &#123;</span><br><span class="line">					<span class="keyword">case</span> <span class="number">256</span>:</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">						tokens[nr_token].type = <span class="number">1</span>;</span><br><span class="line">						<span class="built_in">strncpy</span>(tokens[nr_token].str, &amp;e[position - substr_len], substr_len);</span><br><span class="line">						nr_token++;</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">						tokens[nr_token].type = <span class="number">2</span>;</span><br><span class="line">						<span class="built_in">strncpy</span>(tokens[nr_token].str, &amp;e[position - substr_len], substr_len);</span><br><span class="line">						nr_token++;</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">						tokens[nr_token].type = <span class="number">3</span>;</span><br><span class="line">						<span class="built_in">strncpy</span>(tokens[nr_token].str, &amp;e[position - substr_len], substr_len);</span><br><span class="line">						nr_token++;</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">						tokens[nr_token].type = <span class="number">4</span>;</span><br><span class="line">						<span class="built_in">strcpy</span>(tokens[nr_token].str, <span class="string">&quot;==&quot;</span>);</span><br><span class="line">						nr_token++;</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					<span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">						tokens[nr_token].type = <span class="number">5</span>;</span><br><span class="line">						<span class="built_in">strcpy</span>(tokens[nr_token].str, <span class="string">&quot;!=&quot;</span>);</span><br><span class="line">						nr_token++;</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					<span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">						tokens[nr_token].type = <span class="number">6</span>;</span><br><span class="line">						<span class="built_in">strcpy</span>(tokens[nr_token].str, <span class="string">&quot;||&quot;</span>);</span><br><span class="line">						nr_token++;</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					<span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">						tokens[nr_token].type = <span class="number">7</span>;</span><br><span class="line">						<span class="built_in">strcpy</span>(tokens[nr_token].str, <span class="string">&quot;&amp;&amp;&quot;</span>);</span><br><span class="line">						nr_token++;</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					<span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">						tokens[nr_token].type = <span class="string">&#x27;+&#x27;</span>;</span><br><span class="line">						nr_token++;</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					<span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">						tokens[nr_token].type = <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">						nr_token++;</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					<span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">						tokens[nr_token].type = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">						nr_token++;</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					<span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">						tokens[nr_token].type = <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">						nr_token++;</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					<span class="keyword">case</span> <span class="string">&#x27;!&#x27;</span>:</span><br><span class="line">						tokens[nr_token].type = <span class="string">&#x27;!&#x27;</span>;</span><br><span class="line">						nr_token++;</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					<span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">						tokens[nr_token].type = <span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">						nr_token++;</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					<span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">						tokens[nr_token].type = <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">						nr_token++;</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					<span class="keyword">default</span>: </span><br><span class="line">						assert(<span class="number">0</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>利用代码框架中的switch语句，规定token的类型，nr_token代表了token的数量，strcpy()和strncpy()负责函数将表达式复制到tokens.str中。需要注意区分<b>strcpy()</b>和<b>strncpy()</b>两种函数，前者是复制整个字符串，后者是复制前n个字符。</p>
<hr>
<h2 id="必做任务-4：实现算术表达式的递归求值"><a href="#必做任务-4：实现算术表达式的递归求值" class="headerlink" title="必做任务 4：实现算术表达式的递归求值"></a>必做任务 4：实现算术表达式的递归求值</h2><center><b>nemu/src/monitor/debug/expr.c</b></center>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check_parentheses</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a;</span><br><span class="line">	<span class="keyword">int</span> j = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (tokens[p].type == <span class="string">&#x27;(&#x27;</span> || tokens[q].type == <span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">		<span class="keyword">for</span> (a = p; a &lt;= q; a++)&#123;</span><br><span class="line">			<span class="keyword">if</span> (tokens[a].type == <span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">				j++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (tokens[a].type == <span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">				k++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (a != q &amp;&amp; j == k)&#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (j == k)&#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>写了一个新的函数check_parentheses()，该函数是用来识别表达式中的左括号和右括号是否匹配。这里我依照实验指导书的指示在一开始加了一个判断式，用于判断表达式是否被一对匹配的括号所包围。</p>
<center><b>nemu/src/monitor/debug/expr.c</b></center>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dominant_operator</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> step = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">int</span> op = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">int</span> pri = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">for</span> (i = p; i &lt;= q; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span> (tokens[i].type == <span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">			step++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (tokens[i].type == <span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">			step--;</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">if</span> (step == <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span> (tokens[i].type == OR)&#123;</span><br><span class="line">			<span class="keyword">if</span> (pri &lt; <span class="number">51</span>)&#123;</span><br><span class="line">				op = i;</span><br><span class="line">				pri = <span class="number">51</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (tokens[i].type == AND)&#123;</span><br><span class="line">			<span class="keyword">if</span> (pri &lt; <span class="number">50</span>)&#123;</span><br><span class="line">				op = i;</span><br><span class="line">				pri = <span class="number">50</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (tokens[i].type == EQ || tokens[i].type == NOTEQ)&#123;</span><br><span class="line">			<span class="keyword">if</span> (pri &lt; <span class="number">49</span>)&#123;</span><br><span class="line">				op = i;</span><br><span class="line">				pri = <span class="number">49</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (tokens[i].type == <span class="string">&#x27;+&#x27;</span> || tokens[i].type == <span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span> (pri &lt; <span class="number">48</span>)&#123;</span><br><span class="line">				op = i;</span><br><span class="line">				pri = <span class="number">48</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (tokens[i].type == <span class="string">&#x27;*&#x27;</span> || tokens[i].type == <span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span> (pri &lt; <span class="number">46</span>)&#123;</span><br><span class="line">				op = i;</span><br><span class="line">				pri = <span class="number">46</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (step &lt; <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> op;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里同样写了一个新的函数dominant_operator()，该函数是用于区分运算符的优先级。首先判断表达式中括号数量是否正确，之后进入if语句根据运算符确定相应的优先级。返回值op为-1时则代表有两个token，是用于后续任务所加的判断。</p>
<center><b>nemu/src/monitor/debug/expr.c</b></center>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">eval</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> op;</span><br><span class="line">	<span class="keyword">int</span> val1, val2;</span><br><span class="line">	<span class="keyword">if</span> (p &gt; q)&#123;</span><br><span class="line">		assert(<span class="number">0</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (p == q)&#123;</span><br><span class="line">		<span class="keyword">if</span> (tokens[p].type == NUM)&#123;</span><br><span class="line">			<span class="built_in">sscanf</span>(tokens[p].str, <span class="string">&quot;%d&quot;</span>, &amp;result);</span><br><span class="line">			<span class="keyword">return</span> result;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (tokens[p].type == HEX)&#123;</span><br><span class="line">			<span class="keyword">int</span> i = <span class="number">2</span>;</span><br><span class="line">			<span class="keyword">while</span>(tokens[p].str[i] != <span class="number">0</span>)&#123;</span><br><span class="line">				result *= <span class="number">16</span>;</span><br><span class="line">				result += tokens[p].str[i] &lt; <span class="number">58</span> ? tokens[p].str[i] - <span class="string">&#x27;0&#x27;</span> : tokens[p].str[i] - <span class="string">&#x27;a&#x27;</span> + <span class="number">10</span>;</span><br><span class="line">				i++;</span><br><span class="line">		&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (tokens[p].type == RESGISTER)&#123;</span><br><span class="line">			<span class="keyword">if</span> (!<span class="built_in">strcmp</span>(tokens[p].str, <span class="string">&quot;$eax&quot;</span>))&#123;</span><br><span class="line">					<span class="keyword">return</span> cpu.eax;</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(tokens[p].str, <span class="string">&quot;$ecx&quot;</span>))&#123;</span><br><span class="line">					<span class="keyword">return</span> cpu.ecx;</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(tokens[p].str, <span class="string">&quot;$edx&quot;</span>))&#123;</span><br><span class="line">					<span class="keyword">return</span> cpu.edx;</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(tokens[p].str, <span class="string">&quot;$ebx&quot;</span>))&#123;</span><br><span class="line">					<span class="keyword">return</span> cpu.ebx;</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(tokens[p].str, <span class="string">&quot;$esp&quot;</span>))&#123;</span><br><span class="line">					<span class="keyword">return</span> cpu.esp;</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(tokens[p].str, <span class="string">&quot;$ebp&quot;</span>))&#123;</span><br><span class="line">					<span class="keyword">return</span> cpu.ebp;</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(tokens[p].str, <span class="string">&quot;$esi&quot;</span>))&#123;</span><br><span class="line">					<span class="keyword">return</span> cpu.esi;</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(tokens[p].str, <span class="string">&quot;$edi&quot;</span>))&#123;</span><br><span class="line">					<span class="keyword">return</span> cpu.edi;</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(tokens[p].str, <span class="string">&quot;$eip&quot;</span>))&#123;</span><br><span class="line">					<span class="keyword">return</span> cpu.eip;</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			assert(<span class="number">0</span>);</span><br><span class="line">			&#125;</span><br><span class="line">	 &#125; <span class="keyword">else</span> <span class="keyword">if</span> (check_parentheses(p, q) == <span class="literal">true</span>)&#123;</span><br><span class="line">	 	<span class="keyword">return</span> eval(p + <span class="number">1</span>, q - <span class="number">1</span>);</span><br><span class="line">	 &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		op = dominant_operator(p, q);</span><br><span class="line">	 	<span class="keyword">if</span> (op == <span class="number">-2</span>)&#123;</span><br><span class="line">			assert(<span class="number">0</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (tokens[p].type == <span class="string">&#x27;!&#x27;</span>)&#123;</span><br><span class="line">				<span class="built_in">sscanf</span>(tokens[q].str, <span class="string">&quot;%d&quot;</span>, &amp;result);</span><br><span class="line">				<span class="keyword">return</span> !result;</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (tokens[p].type == RESGISTER) &#123;</span><br><span class="line">				<span class="keyword">if</span> (!<span class="built_in">strcmp</span>(tokens[p].str, <span class="string">&quot;$eax&quot;</span>))&#123;</span><br><span class="line">					result = cpu.eax;</span><br><span class="line">					<span class="keyword">return</span> result;</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(tokens[p].str, <span class="string">&quot;$ecx&quot;</span>))&#123;</span><br><span class="line">					result = cpu.ecx;</span><br><span class="line">					<span class="keyword">return</span> result;</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(tokens[p].str, <span class="string">&quot;$edx&quot;</span>))&#123;</span><br><span class="line">					result = cpu.edx;</span><br><span class="line">					<span class="keyword">return</span> result;</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(tokens[p].str, <span class="string">&quot;$ebx&quot;</span>))&#123;</span><br><span class="line">					result = cpu.ebx;</span><br><span class="line">					<span class="keyword">return</span> result;</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(tokens[p].str, <span class="string">&quot;$esp&quot;</span>))&#123;</span><br><span class="line">					result = cpu.esp;</span><br><span class="line">					<span class="keyword">return</span> result;</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(tokens[p].str, <span class="string">&quot;$ebp&quot;</span>))&#123;</span><br><span class="line">					result = cpu.ebp;</span><br><span class="line">					<span class="keyword">return</span> result;</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(tokens[p].str, <span class="string">&quot;$esi&quot;</span>))&#123;</span><br><span class="line">					result = cpu.esi;</span><br><span class="line">					<span class="keyword">return</span> result;</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(tokens[p].str, <span class="string">&quot;$edi&quot;</span>))&#123;</span><br><span class="line">					result = cpu.edi;</span><br><span class="line">					<span class="keyword">return</span> result;</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(tokens[p].str, <span class="string">&quot;$eip&quot;</span>))&#123;</span><br><span class="line">					result = cpu.eip;</span><br><span class="line">					<span class="keyword">return</span> result;</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					assert(<span class="number">0</span>);</span><br><span class="line">					<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		val1 = eval(p, op - <span class="number">1</span>);</span><br><span class="line">		val2 = eval(op + <span class="number">1</span>, q);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">switch</span> (tokens[op].type)&#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span> : <span class="keyword">return</span> val1 + val2;	</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span> : <span class="keyword">return</span> val1 - val2;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span> : <span class="keyword">return</span> val1 * val2;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span> : <span class="keyword">return</span> val1 / val2;</span><br><span class="line">			<span class="keyword">case</span> OR : <span class="keyword">return</span> val1 || val2;</span><br><span class="line">			<span class="keyword">case</span> AND : <span class="keyword">return</span> val1 &amp;&amp; val2;</span><br><span class="line">			<span class="keyword">case</span> EQ : </span><br><span class="line">				   <span class="keyword">if</span> (val1 == val2)&#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">				   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">				   &#125;</span><br><span class="line">			<span class="keyword">case</span> NOTEQ :</span><br><span class="line">				   <span class="keyword">if</span> (val1 != val2)&#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">				    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">				    &#125;</span><br><span class="line">			<span class="keyword">default</span> : assert(<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	 &#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写eval()函数，该函数用于表达式求值。开始先对分裂出来的两个子表达式进行递归求值，然后再根据优先级对两个子表达式的值进行运算。</p>
<hr>
<h2 id="选做任务-1：实现带有负数的算术表达式的求值"><a href="#选做任务-1：实现带有负数的算术表达式的求值" class="headerlink" title="选做任务 1：实现带有负数的算术表达式的求值"></a>选做任务 1：实现带有负数的算术表达式的求值</h2><center><b>nemu/src/monitor/debug/expr.c</b></center>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">eval</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span></span>&#123;</span><br><span class="line">	 	<span class="keyword">if</span> (op == <span class="number">-2</span>)&#123;</span><br><span class="line">			assert(<span class="number">0</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">-1</span>)&#123;</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (tokens[p].type == NEG)&#123;</span><br><span class="line">				<span class="built_in">sscanf</span>(tokens[q].str, <span class="string">&quot;%d&quot;</span>, &amp;result);</span><br><span class="line">				<span class="keyword">return</span> -result;</span><br><span class="line">			<span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当op == -1的时候，如果token的类型是NEG，则取出表达式并且放在result，最后返回-result即可。</p>
<hr>
<h2 id="必做任务-5：实现更复杂的表达式求值"><a href="#必做任务-5：实现更复杂的表达式求值" class="headerlink" title="必做任务 5：实现更复杂的表达式求值"></a>必做任务 5：实现更复杂的表达式求值</h2><p>已完成。</p>
<hr>
<h2 id="选做任务-2：实现指针解引用"><a href="#选做任务-2：实现指针解引用" class="headerlink" title="选做任务 2：实现指针解引用"></a>选做任务 2：实现指针解引用</h2><center><b>nemu/src/monitor/debug/expr.c</b></center>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">eval</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">	 	<span class="keyword">if</span> (op == <span class="number">-2</span>)&#123;</span><br><span class="line">			assert(<span class="number">0</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">			<span class="keyword">if</span>(tokens[p].type == POINT)&#123;</span><br><span class="line">				<span class="keyword">if</span> (!<span class="built_in">strcmp</span>(tokens[p + <span class="number">2</span>].str, <span class="string">&quot;$eax&quot;</span>))&#123;</span><br><span class="line">					result = swaddr_read(cpu.eax, <span class="number">4</span>);</span><br><span class="line">					<span class="keyword">return</span> result;</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(tokens[p + <span class="number">2</span>].str, <span class="string">&quot;$ecx&quot;</span>))&#123;</span><br><span class="line">					result = swaddr_read(cpu.ecx, <span class="number">4</span>);</span><br><span class="line">					<span class="keyword">return</span> result;</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(tokens[p + <span class="number">2</span>].str, <span class="string">&quot;$edx&quot;</span>))&#123;</span><br><span class="line">					result = swaddr_read(cpu.edx, <span class="number">4</span>);</span><br><span class="line">					<span class="keyword">return</span> result;</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(tokens[p + <span class="number">2</span>].str, <span class="string">&quot;$ebx&quot;</span>))&#123;</span><br><span class="line">					result = swaddr_read(cpu.ebx, <span class="number">4</span>);</span><br><span class="line">					<span class="keyword">return</span> result;</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(tokens[p + <span class="number">2</span>].str, <span class="string">&quot;$esp&quot;</span>))&#123;</span><br><span class="line">					result = swaddr_read(cpu.esp, <span class="number">4</span>);</span><br><span class="line">					<span class="keyword">return</span> result;</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(tokens[p + <span class="number">2</span>].str, <span class="string">&quot;$ebp&quot;</span>))&#123;</span><br><span class="line">					result = swaddr_read(cpu.ebp, <span class="number">4</span>);</span><br><span class="line">					<span class="keyword">return</span> result;</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(tokens[p + <span class="number">2</span>].str, <span class="string">&quot;$esi&quot;</span>))&#123;</span><br><span class="line">					result = swaddr_read(cpu.esi, <span class="number">4</span>);</span><br><span class="line">					<span class="keyword">return</span> result;</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(tokens[p + <span class="number">2</span>].str, <span class="string">&quot;$edi&quot;</span>))&#123;</span><br><span class="line">					result = swaddr_read(cpu.edi, <span class="number">4</span>);</span><br><span class="line">					<span class="keyword">return</span> result;</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(tokens[p + <span class="number">2</span>].str, <span class="string">&quot;$eip&quot;</span>))&#123;</span><br><span class="line">					result = swaddr_read(cpu.eip, <span class="number">4</span>);</span><br><span class="line">					<span class="keyword">return</span> result;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当op == -1的时候，如果token的类型是POINT，判断是哪一个寄存器后，取出的值放在result，最后返回result。</p>
<center><b>nemu/src/monitor/debug/expr.c</b></center>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">expr</span><span class="params">(<span class="keyword">char</span> *e, <span class="keyword">bool</span> *success)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nr_token; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span> (tokens[i].type == <span class="string">&#x27;*&#x27;</span> &amp;&amp; (i == <span class="number">0</span> || (tokens[i - <span class="number">1</span>].type != NUM &amp;&amp; tokens[i - <span class="number">1</span>].type != HEX &amp;&amp; tokens[i - <span class="number">1</span>].type != <span class="string">&#x27;)&#x27;</span>)))&#123;</span><br><span class="line">			tokens[i].type = POINT;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (tokens[i].type == <span class="string">&#x27;-&#x27;</span> &amp;&amp; (i == <span class="number">0</span> || (tokens[i - <span class="number">1</span>].type != NUM &amp;&amp; tokens[i - <span class="number">1</span>].type != HEX &amp;&amp; tokens[i - <span class="number">1</span>].type != <span class="string">&#x27;)&#x27;</span>)))&#123;</span><br><span class="line">			tokens[i].type = NEG;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> eval(<span class="number">0</span>, nr_token - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>判断token属于POINT还是NEG很简单，只要判断token前一个运算符是哪一些即可。</p>
<center><b>nemu/src/monitor/debug/ui.c</b></center>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">cmd_p</span><span class="params">(<span class="keyword">char</span> *args)</span></span>&#123;</span><br><span class="line">	<span class="keyword">bool</span> *success = <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	i = expr(args, success);</span><br><span class="line">	<span class="keyword">if</span> (!success)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加表达式求值打印的指令。</p>
<h3 id="输出结果-2"><a href="#输出结果-2" class="headerlink" title="输出结果"></a>输出结果</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(nemu) x 10 0x1234</span><br><span class="line">0x00000000 0x99848b66 0x00002000 0x0099a48a 0x8b000020 </span><br><span class="line">0x00123415 0x158b6600 0x00001234 0x1234158a 0x358a0000</span><br><span class="line">(nemu) p 0xc0100000 - (($edx+0x1234-10) * 16) / 4</span><br><span class="line">-1072711848</span><br><span class="line">(nemu) p (!($ecx != 0x00008000) &amp;&amp; ($eax == 0x00000000)) + 0x12345678 </span><br><span class="line">305419897</span><br><span class="line">(nemu) p -5 + *($eip)</span><br><span class="line">536904070</span><br><span class="line">(nemu) w ($eip==0x100224)</span><br><span class="line">Watch point 0: ($eip==0x100224)</span><br><span class="line">(nemu) c</span><br><span class="line">Hint watchpoint 0 at address 0x00100224</span><br></pre></td></tr></table></figure>

<p><font size =2><center><b>上述测试命令是启动 nemu 并运行 100 步（si 100）之后输入的命令</b></center></font></p>
<hr>
<h2 id="必做任务-6：实现监视点池的管理"><a href="#必做任务-6：实现监视点池的管理" class="headerlink" title="必做任务 6：实现监视点池的管理"></a>必做任务 6：实现监视点池的管理</h2><p>这次的任务主要是对链表的相关操作进行一个复习。</p>
<center><b>nemu/src/monitor/debug/watchpoint.c</b></center>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">WP* <span class="title">new_wp</span><span class="params">()</span></span>&#123;</span><br><span class="line">	WP *temp;</span><br><span class="line">	temp = free_;</span><br><span class="line">	free_ = free_-&gt;next;</span><br><span class="line">	temp-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">if</span> (head == <span class="literal">NULL</span>)&#123;</span><br><span class="line">		head = temp;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		WP* temp2;</span><br><span class="line">		temp2 = head;</span><br><span class="line">		<span class="keyword">while</span> (temp2-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">			temp2 = temp2-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">		temp2-&gt;next = temp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写一个new_wp()，该函数用于从代码框架中的free_链表返回一个闲置的监视点结构。</p>
<center><b>nemu/src/monitor/debug/watchpoint.c</b></center>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">free_wp</span><span class="params">(WP *wp)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (wp == <span class="literal">NULL</span>)&#123;</span><br><span class="line">		assert(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (wp == head)&#123;</span><br><span class="line">		head = head-&gt;next;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		WP* temp = head;</span><br><span class="line">		<span class="keyword">while</span> (temp != <span class="literal">NULL</span> &amp;&amp; temp-&gt;next != wp)&#123;</span><br><span class="line">			temp = temp-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">		temp-&gt;next = temp-&gt;next-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	wp-&gt;next =free_;</span><br><span class="line">	free_ = wp;</span><br><span class="line">	wp-&gt;result = <span class="number">0</span>;</span><br><span class="line">	wp-&gt;expr[<span class="number">0</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写一个free_wp()，将wp归还至free_链表当中。</p>
<hr>
<h2 id="必做任务-7：实现监视点"><a href="#必做任务-7：实现监视点" class="headerlink" title="必做任务 7：实现监视点"></a>必做任务 7：实现监视点</h2><p>实现类似GDB的监视点功能。</p>
<center><b>nemu/src/monitor/debug/watchpoint.c</b></center>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">checkWP</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">bool</span> check = <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">bool</span> *success = <span class="literal">false</span>;</span><br><span class="line">	WP *temp = head;</span><br><span class="line">	<span class="keyword">int</span> expr_temp;</span><br><span class="line">	<span class="keyword">while</span>(temp != <span class="literal">NULL</span>)&#123;</span><br><span class="line">		expr_temp = expr(temp-&gt;expr, success);</span><br><span class="line">		<span class="keyword">if</span> (expr_temp != temp-&gt;result)&#123;</span><br><span class="line">			check = <span class="literal">true</span>;</span><br><span class="line">			<span class="built_in">printf</span> (<span class="string">&quot;Hint watchpoint %d at address 0x%08x\n&quot;</span>, temp-&gt;NO, cpu.eip);</span><br><span class="line">			temp = temp-&gt;next;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span> (<span class="string">&quot;Watchpoint %d: %s\n&quot;</span>,temp-&gt;NO,temp-&gt;expr);</span><br><span class="line">		<span class="built_in">printf</span> (<span class="string">&quot;Old value = %d\n&quot;</span>,temp-&gt;result);</span><br><span class="line">		<span class="built_in">printf</span> (<span class="string">&quot;New value = %d\n&quot;</span>,expr_temp);</span><br><span class="line">		temp-&gt;result = expr_temp;</span><br><span class="line">		temp = temp-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> check;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写一个checkWP()函数，该函数用于判断监视点是否触发。首先进行表达式求值，每当NEMU执行完一条指令，则若触发了用户所设的监视点，程序便会暂停下来，否则打印监视点、旧值和新值。</p>
<center><b>nemu/src/monitor/debug/cpu-exec.c</b></center>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* <span class="doctag">TODO:</span> check watchpoints here. */</span></span><br><span class="line"><span class="keyword">bool</span> change = checkWP();</span><br><span class="line"><span class="keyword">if</span> (change)&#123;</span><br><span class="line">	nemu_state = STOP;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>触发监视点后，更改nemu_state的状态。</p>
<center><b>nemu/src/monitor/debug/watchpoint.c</b></center>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printf_wp</span><span class="params">()</span></span>&#123;</span><br><span class="line">	WP *temp = head;</span><br><span class="line">	<span class="keyword">if</span> (temp == <span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;No watchpoints\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (temp != <span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Watch point %d: %s\n&quot;</span>, temp-&gt;NO, temp-&gt;expr);</span><br><span class="line">		temp = temp-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简单的链表输出操作。</p>
<center><b>nemu/src/monitor/debug/ui.c</b></center>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">WP* <span class="title">delete_wp</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">bool</span> *key)</span></span>&#123;</span><br><span class="line">	WP *temp = head;</span><br><span class="line">	<span class="keyword">while</span> (temp != <span class="literal">NULL</span> &amp;&amp; temp-&gt;NO != p)&#123;</span><br><span class="line">		temp = temp-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (temp == <span class="literal">NULL</span>)&#123;</span><br><span class="line">		*key = <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简单的链表删除操作。</p>
<center><b>nemu/src/monitor/debug/ui.c</b></center>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">cmd_info</span><span class="params">(<span class="keyword">char</span> *args)</span></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">strcmp</span>(sencondWord, <span class="string">&quot;w&quot;</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">		printf_wp();</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;MISINPUT\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在cmd_info()函数中添加判断，实现打印监视点的功能。</p>
<center><b>nemu/src/monitor/debug/ui.c</b></center>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">cmd_d</span><span class="params">(<span class="keyword">char</span> *args)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> p;</span><br><span class="line">	<span class="keyword">bool</span> key = <span class="literal">true</span>;</span><br><span class="line">	<span class="built_in">sscanf</span>(args, <span class="string">&quot;%d&quot;</span>, &amp;p);</span><br><span class="line">	WP* q = delete_wp(p, &amp;key);</span><br><span class="line">	<span class="keyword">if</span> (key)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Delete watchpoint %d: %s\n&quot;</span>, q-&gt;NO, q-&gt;expr);</span><br><span class="line">		free_wp(q);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;No found watchpoint %d\n&quot;</span>, p);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加删除指令。</p>
<h3 id="输出结果-3"><a href="#输出结果-3" class="headerlink" title="输出结果"></a>输出结果</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(nemu) info w</span><br><span class="line">No watchpoints</span><br><span class="line">(nemu) w 0x100000</span><br><span class="line">[nemu/src/monitor/debug/expr.c,98,make_token] match rules[6] = <span class="string">&quot;0[xX][0-9a-fA-F]+&quot;</span> at position 0 with len 8: 0x100000</span><br><span class="line">Watch point 0: 0x100000</span><br><span class="line">(nemu) si</span><br><span class="line">  100000:   bd 00 00 00 00                        movl <span class="variable">$0x0</span>,%ebp</span><br><span class="line">[nemu/src/monitor/debug/expr.c,98,make_token] match rules[6] = <span class="string">&quot;0[xX][0-9a-fA-F]+&quot;</span> at position 0 with len 8: 0x100000</span><br><span class="line">Watchpoint 0: 0x100000</span><br><span class="line">Old value = 0</span><br><span class="line">New value = 0</span><br><span class="line">(nemu) w 0x888888</span><br><span class="line">[nemu/src/monitor/debug/expr.c,98,make_token] match rules[6] = <span class="string">&quot;0[xX][0-9a-fA-F]+&quot;</span> at position 0 with len 8: 0x888888</span><br><span class="line">Watch point 1: 0x888888</span><br><span class="line">(nemu) info w</span><br><span class="line">Watch point 0: 0x100000</span><br><span class="line">Watch point 1: 0x888888</span><br><span class="line">(nemu) d 0</span><br><span class="line">Delete watchpoint 0: 0x100000</span><br><span class="line">(nemu) info w</span><br><span class="line">Watch point 1: 0x888888</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="任务自查表"><a href="#任务自查表" class="headerlink" title="任务自查表"></a>任务自查表</h2><table>
<thead>
<tr>
<th align="center">序号</th>
<th align="center">是否已完成</th>
</tr>
</thead>
<tbody><tr>
<td align="center">必做任务1</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">必做任务2</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">必做任务3</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">必做任务4</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">必做任务5</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">必做任务6</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">必做任务7</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">选做任务1</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">选做任务2</td>
<td align="center">是</td>
</tr>
</tbody></table>
<hr>
<h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><table><tr><td bgcolor=red><center><b>思考题仅作为个人思考，若有错误欢迎指出</a>。</b></center></td></tr></table>

<h3 id="思考题1：opcode-table-到底是一个什么类型的数组？"><a href="#思考题1：opcode-table-到底是一个什么类型的数组？" class="headerlink" title="思考题1：opcode_table 到底是一个什么类型的数组？"></a><b>思考题1：opcode_table 到底是一个什么类型的数组？</b></h3><blockquote>
<p>opcode_table 数组是一个函数指针数组。</p>
</blockquote>
<h3 id="思考题2（1）：在-cmd-c-函数中-调用-cpu-exec-的时候传入了参数-1-你知道为什么吗"><a href="#思考题2（1）：在-cmd-c-函数中-调用-cpu-exec-的时候传入了参数-1-你知道为什么吗" class="headerlink" title="思考题2（1）：在 cmd_c()函数中, 调用 cpu_exec()的时候传入了参数-1 , 你知道为什么吗?"></a><b>思考题2（1）：在 cmd_c()函数中, 调用 cpu_exec()的时候传入了参数-1 , 你知道为什么吗?</b></h3><blockquote>
<p>-1是无符号类型最大的数字，所以函数里的for循环可以执行所以指令。</p>
</blockquote>
<h3 id="思考题2（2）：框架代码中定义-wp-pool-等变量的时候使用了关键字-static，static-在此处-的含义是什么-为什么要在此处使用它"><a href="#思考题2（2）：框架代码中定义-wp-pool-等变量的时候使用了关键字-static，static-在此处-的含义是什么-为什么要在此处使用它" class="headerlink" title="思考题2（2）：框架代码中定义 wp_pool 等变量的时候使用了关键字 static，static 在此处 的含义是什么? 为什么要在此处使用它?"></a><b>思考题2（2）：框架代码中定义 wp_pool 等变量的时候使用了关键字 static，static 在此处 的含义是什么? 为什么要在此处使用它?</b></h3><blockquote>
<p>在此处的含义是静态全局变量，该变量只能被本文件中的函数调用，并且是全局变量，而不能被同一程序其他文件中的函数调用，使用static是为了避免它被误修改。</p>
</blockquote>
<h3 id="思考题3："><a href="#思考题3：" class="headerlink" title="思考题3："></a><b>思考题3：</b></h3><ul>
<li><b>EFLAGS 寄存器中的 CF 位是什么意思?</b></li>
</ul>
<blockquote>
<p>i386手册里P34页中和参阅附录c提到，CF是进位标志。</p>
</blockquote>
<ul>
<li><b>ModR/M 字节是什么?</b></li>
</ul>
<blockquote>
<p>P241-243页。ModR/M 由 Mod，Reg/Opcode，R/M 三个部分组成。 Mod 是前两位，提供寄存器寻址和内存寻址， Reg/Opcode为3-5位，如果是Reg表示使用哪个寄存器，Opcode表示对group属性的Opcode进行补充； R/M为6-8位，与mod结合起来会得到8个寄存器和24个内存寻址。</p>
</blockquote>
<ul>
<li> <b>mov 指令的具体格式是怎么样的?</b></li>
</ul>
<blockquote>
<p>P345页，格式是DEST ← SRC。</p>
</blockquote>
<ul>
<li><b>完成 PA1 的内容之后, nemu 目录下的所有.c 和.h 和文件总 共有多少行代码? 你是使用什么命令得到这个结果的？和框架代码相 比, 你在 PA1 中编写了多少行代码？你可以把这条命令写入 Makefile 中, 随着实验进度的推进, 你可以很方便地统计工程的代码行数, 例如 敲入 make count 就会自动运行统计代码行数的命令。再来个难一点的,  除去空行之外, nemu 目录下的所有.c 和.h 文件总共有多少行代码？</b></li>
</ul>
<blockquote>
<p>通过find . -name “*[.h/.c]” | xargs wc -l命令，得到4803行。和框架代码4197行相比, 我在 PA1 中编写了606行代码。</p>
<p>通过find . -name “*[.h/.c]” | xargs grep “^.” | wc -l命令计算去除空行的所有.c .h文件得到了3900行代码。</p>
<p>make count指令如下：</p>
<p>make count </p>
<p>​    @find nemu/ -name “<em>.c” -o -name “</em>.h” | xargs cat | grep -v ^$$ | wc -l </p>
</blockquote>
<ul>
<li><b>打开工程目录下的 Makefile 文件, 你会在 CFLAGS 变量中看到 gcc 的一些编译选项。请解释 gcc 中的-Wall 和-Werror 有什么作用? 为 什么要使用-Wall 和-Werror？</b></li>
</ul>
<blockquote>
<p>-Wall 使GCC编译后显示所有的警告信息。 -Werror 会将将所有的警告当成错误进行处理，并且取消编译操作。 使用 -Wall 和 -Werror就是为了找出可能存在的错误，尽可能地避免程序运行出错，优化程序。</p>
</blockquote>
<hr>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>PA1只要学过c基本上实现没什么难度。</p>
<br>

]]></content>
      <categories>
        <category>计算机系统基础大作业</category>
      </categories>
      <tags>
        <tag>NEMU</tag>
      </tags>
  </entry>
</search>
